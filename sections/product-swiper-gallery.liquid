{% comment %}
  Section: Product Swiper Gallery with color-based filtering & accordion
  Best Practices: responsive, configurable via schema, optimized for CLI themes
{% endcomment %}

{{ 'product-swiper-gallery.css' | asset_url | stylesheet_tag }}

<link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/swiper@11/swiper-bundle.min.css">

{% assign color_idx = 0 %}
{% for opt_name in product.options %}
    {% assign downcased_opt_name = opt_name | downcase %}
    {% if downcased_opt_name contains 'color' %}
        {% assign color_idx = forloop.index %}
        {% break %}
    {% endif %}
{% endfor %}

<div class="product-swiper-gallery page-width" data-section-id="{{ section.id }}">
    <div class="product-gallery-layout">
        <div class="product-gallery-left">
            {% if product.media.size == 1 %}
                {{ product.media[0] | media_tag }}
            {% elsif product.media.size > 1 %}
                <div class="swiper-container">
                    <div class="swiper-wrapper">
                        {% for media in product.media %}
                            {% if media.media_type == 'image' %}
                                {% assign slide_color = '' %}
                                {% if color_idx > 0 %}
                                    {% for variant in product.variants %}
                                        {% if variant.featured_media and variant.featured_media.id == media.id %}
                                            {% assign opt_key = 'option' | append: color_idx %}
                                            {% assign slide_color = variant[opt_key] | downcase %}
                                            {% break %}
                                        {% endif %}
                                    {% endfor %}
                                {% endif %}

                                <div class="swiper-slide" data-color="{{ slide_color | default: 'slide-color' }}">
                                    {% comment %} всегда используем preview_image, даже для «простых» картинок {% endcomment %}
                                    <img
                                            src="{{ media.preview_image | image_url: width: 1000 }}"
                                            alt="{{ media.alt }}"
                                            loading="lazy"
                                            class="swiper-slide-image"
                                    />
                                </div>
                            {% endif %}
                        {% endfor %}
                    </div>
                    {% if section.settings.show_pagination %}
                        <div class="swiper-pagination"></div>
                    {% endif %}
                    {% if section.settings.show_navigation %}
                        <div class="swiper-button-prev">
                            {{ 'icon-caret.svg' | inline_asset_content }}
                        </div>
                        <div class="swiper-button-next">
                            {{ 'icon-caret.svg' | inline_asset_content }}
                        </div>
                    {% endif %}
                </div>
            {% endif %}
        </div>

        <div class="product-gallery-right">
            <h1 class="product-title">{{ product.title }}</h1>
            <div class="product-description">{{ product.description }}</div>
            <div class="product-price">
                {% render 'price', product: product %}
            </div>
            <div class="product-form">
                <div data-section-id="{{ section.id }}">
                    {% form 'product', product %}
                        <input type="hidden" name="id" value="{{ product.selected_or_first_available_variant.id }}">
                        {% for option in product.options_with_values %}
                            <div class="product-form__input" data-option-name="{{ option.name }}">
                                <label class="form__label">{{ option.name }}</label>
                                {% if option.name == 'Color' %}
                                    <div class="swatch-options">
                                        {% for value in option.values %}
                                            <label style="cursor: pointer; display: inline-block; margin: 0.25rem;">
                                                <input type="radio" name="options[{{ option.name }}]" value="{{ value }}" class="swatch-input visually-hidden" style="--swatch-color: {{ value | downcase }};">
                                                <span class="swatch-icon" style="--swatch-color: {{ value | downcase }};">{{ 'icon-heart.svg' | inline_asset_content }}</span>
                                            </label>
                                        {% endfor %}
                                    </div>
                                {% else %}
                                    <select name="options[{{ option.name }}]">
                                        {% for value in option.values %}
                                            <option value="{{ value }}">{{ value }}</option>
                                        {% endfor %}
                                    </select>
                                {% endif %}
                            </div>
                        {% endfor %}
                        <button class="product-form__submit button button--full-width">{{ 'products.product.add_to_cart' | t }}</button>
                    {% endform %}
                </div>
            </div>

            {% assign accordion_items = product.metafields.custom.accordion_data.value %}
            {% if accordion_items and accordion_items.size > 0 %}
                <div class="product-accordion" data-multiple="{{ section.settings.allow_multiple }}">
                    {% for block in accordion_items %}
                        {% if block.title != blank and block.content != blank %}
                            <div class="accordion-item">
                                <button class="accordion-header" aria-expanded="false">{{ block.title }}</button>
                                <div class="accordion-body">{{ block.content }}</div>
                            </div>
                        {% endif %}
                    {% endfor %}
                </div>
            {% endif %}
        </div>
    </div>
</div>

<script src="https://cdn.jsdelivr.net/npm/swiper@11/swiper-bundle.min.js"></script>

<script>
    document.addEventListener('DOMContentLoaded', () => {
        const sectionEl    = document.querySelector('[data-section-id="{{ section.id }}"]');
        const swiperEl     = sectionEl.querySelector('.swiper-container');
        const productForm  = sectionEl.querySelector('.product-form');
        const variantField = productForm.querySelector('input[name="id"]');
        const swatches     = Array.from(sectionEl.querySelectorAll('.swatch-input'));
        const addToCartBtn = sectionEl.querySelector('.product-form__submit');
        const productData  = {{ product | json }};
        const colorIndex   = {{ color_idx }};

        if (!swiperEl || !productForm) return;

        let swiper = new Swiper(swiperEl, {
            slidesPerView:  parseInt({{ section.settings.slides_mobile }}),
            spaceBetween:  {{ section.settings.space_between }},
            loop:           true,
            allowTouchMove: true,
            pagination:     { el: swiperEl.querySelector('.swiper-pagination'), clickable: true },
            navigation:     {
                nextEl: swiperEl.querySelector('.swiper-button-next'),
                prevEl: swiperEl.querySelector('.swiper-button-prev'),
            },
            breakpoints: {
                768:  { slidesPerView: {{ section.settings.slides_tablet }} },
                1024: { slidesPerView: {{ section.settings.slides_desktop }} }
            }
        });

        const originalSlides = Array.from(
            swiper.wrapperEl.querySelectorAll('.swiper-slide:not(.swiper-slide-duplicate)')
        );

        const getColorValue = variant => {
            if (Array.isArray(variant.options) && variant.options.length >= colorIndex && colorIndex > 0) {
                return variant.options[colorIndex - 1].toLowerCase();
            }
            const key = `option${colorIndex}`;
            return variant[key] ? variant[key].toLowerCase() : '';
        };

        const updateSlidesByColor = (color) => {
            const container = swiperEl;
            const currentHeight = container.clientHeight;
            container.style.minHeight = `${currentHeight}px`;

            const slidesToRender = !color
                ? originalSlides
                : originalSlides.filter(slide => (slide.dataset.color || '').toLowerCase() === color);

            const slidesHTML = slidesToRender.map(slide => slide.outerHTML);

            swiper.removeAllSlides();
            swiper.appendSlide(slidesHTML);

            swiper.update();
            swiper.loopFix();

            container.style.minHeight = '';
        };

        const updateCartBubble = () => {
            fetch('/cart.js')
                .then(res => res.json())
                .then(cart => {
                    const count = cart.item_count;
                    const cartIcon = document.getElementById('cart-icon-bubble');
                    if (!cartIcon) return;

                    const svg = cartIcon.querySelector('svg');
                    if (svg) {
                        svg.classList.remove('icon-cart-empty');
                        svg.classList.add('icon-cart');
                    }

                    let bubble = cartIcon.querySelector('.cart-count-bubble');
                    if (!bubble) {
                        bubble = document.createElement('div');
                        bubble.className = 'cart-count-bubble';
                        cartIcon.appendChild(bubble);
                    }

                    let visibleCount = bubble.querySelector('span[aria-hidden="true"]');
                    let hiddenCount  = bubble.querySelector('span.visually-hidden');
                    if (!visibleCount) {
                        visibleCount = document.createElement('span');
                        visibleCount.setAttribute('aria-hidden', 'true');
                        bubble.appendChild(visibleCount);
                    }
                    if (!hiddenCount) {
                        hiddenCount = document.createElement('span');
                        hiddenCount.className = 'visually-hidden';
                        bubble.appendChild(hiddenCount);
                    }

                    visibleCount.textContent = count;
                    hiddenCount.textContent  = `${count} ${count === 1 ? 'item' : 'items'}`;

                    bubble.classList.remove('visually-hidden');
                })
                .catch(err => console.error('Could not update cart bubble:', err));
        }

        const updateCartDrawer = () => {
            const drawer = document.querySelector('cart-drawer');
            if (!drawer) return;

            const sectionIds = drawer.getSectionsToRender().map(s => s.id).join(',');

            fetch(`/?sections=${sectionIds}`)
                .then(res => res.json())
                .then(parsedState => {
                    const variantInput = document.querySelector('form[action^="/cart/add"] input[name="id"]');
                    const currentVariant = variantInput ? parseInt(variantInput.value, 10) : null;

                    drawer.renderContents({ sections: parsedState, id: currentVariant });
                    drawer.open();
                })
                .catch(err => {
                    console.error('Failed to update cart drawer:', err);
                });
        }

        if (swatches.length === 1) {
            const single = swatches[0];
            const color  = single.value.trim().toLowerCase();

            single.checked = true;
            single.setAttribute('checked','checked');

            const variant = productData?.variants.find(v => getColorValue(v) === color);
            if (variant) {
                variantField.value = variant.id;
            }

            updateSlidesByColor(color);
        }

        swatches.forEach(input => {
            input.addEventListener('click', (e) => {
                const selColor = input.value.trim().toLowerCase();
                const hadAttr  = input.hasAttribute('checked');

                if (hadAttr) {
                    input.removeAttribute('checked');
                    input.checked = false;
                    updateSlidesByColor('');
                } else {
                    swatches.forEach(i => {
                        i.removeAttribute('checked');
                        i.checked = false;
                    });
                    input.setAttribute('checked', 'checked');
                    input.checked = true;

                    productForm.querySelectorAll('.option-error').forEach(el => el.remove());
                    productForm.querySelectorAll('.option-error-target').forEach(el => {
                        el.classList.remove('option-error-target');
                    });

                    const variant = productData.variants.find(v =>
                        getColorValue(v) === selColor
                    );
                    if (variant) {
                        productForm.querySelector('input[name="id"]').value = variant.id;
                        productForm.dispatchEvent(new CustomEvent('variantChange', { detail: { variant } }));
                    }
                }
            });
        });

        productForm.addEventListener('variantChange', e => {
            updateSlidesByColor(getColorValue(e.detail.variant));
        });

        addToCartBtn.addEventListener('click', async (e) => {
            e.preventDefault();

            const missing = [];
            productData.options.forEach(optionName => {
                const fieldName = `options[${optionName}]`;
                const elements = productForm.querySelectorAll(`[name="${fieldName}"]`);
                let value = '';

                if (!elements.length) return;

                if (elements[0].tagName.toLowerCase() === 'select') {
                    value = elements[0].value;
                } else {
                    const checkedRadio = productForm.querySelector(
                        `[name="${fieldName}"]:checked`
                    );
                    value = checkedRadio ? checkedRadio.value : '';
                }

                if (!value) missing.push(optionName);
            });

            productForm.querySelectorAll('.option-error').forEach(el => el.remove());
            productForm.querySelectorAll('.option-error-target').forEach(el => {
                el.classList.remove('option-error-target');
            });

            if (missing.length) {
                missing.forEach(optName => {
                    const container = productForm.querySelector(`[data-option-name="${optName}"]`);
                    if (container) {
                        container.classList.add('option-error-target');
                        const msg = document.createElement('div');
                        msg.className = 'option-error';
                        msg.textContent = `Please select ${optName}`;
                        container.appendChild(msg);
                    }
                });
                return;
            }

            const variantId = parseInt(
                productForm.querySelector('input[name="id"]').value,
                10
            );

            const quantity = 1;

            addToCartBtn.disabled = true;
            addToCartBtn.textContent = 'Adding…';

            try {
                const response = await fetch('/cart/add.js', {
                    method: 'POST',
                    headers: { 'Content-Type': 'application/json' },
                    body: JSON.stringify({ id: variantId, quantity })
                });

                if (!response.ok) throw new Error(`Status ${response.status}`);
                const item = await response.json();

                updateCartBubble();
                updateCartDrawer();
            } catch (error) {
                console.error('Add to cart error:', error);
                alert('Failed to add item to cart. Please try again later.');
            } finally {
                addToCartBtn.disabled = false;
                addToCartBtn.textContent = '{{ "products.product.add_to_cart" | t }}';
            }
        });
    });
</script>

{% schema %}
{
  "name": "Product Swiper Gallery",
  "settings": [
    {
      "type": "range",
      "id": "slides_desktop",
      "label": "Slides on desktop",
      "min": 1,
      "max": 6,
      "default": 4
    },
    {
      "type": "range",
      "id": "slides_tablet",
      "label": "Slides on tablet",
      "min": 1,
      "max": 4,
      "default": 2
    },
    {
      "type": "select",
      "id": "slides_mobile",
      "label": "Slides on mobile",
      "options": [
        { "value": "1", "label": "1" },
        { "value": "2", "label": "2" }
      ],
      "default": "1"
    },
    {
      "type": "checkbox",
      "id": "show_pagination",
      "label": "Show pagination",
      "default": true
    },
    {
      "type": "checkbox",
      "id": "show_navigation",
      "label": "Show navigation arrows",
      "default": true
    },
    {
      "type": "range",
      "id": "space_between",
      "label": "Space between slides (px)",
      "min": 0,
      "max": 50,
      "default": 10
    },
    {
      "type": "checkbox",
      "id": "allow_multiple",
      "label": "Allow multiple accordions open",
      "default": false
    }
  ],
  "presets": [
    {
      "name": "Product Swiper Gallery",
      "category": "Product"
    }
  ],
  "templates": ["product"]
}
{% endschema %}
